
#include "displacement_map.h"
#include <fstream>
#include "system.h"
#include <math.h>
#include <iostream>
#include "version.h"

using namespace std;


/*constructor*/
Displacement_Map::Displacement_Map(System* sys, int timespacing, int blockstart, int blockend, float maxdisp)
{
  int timeii;

  system = syst = sys;

  firstblock = blockstart;
  lastblock = blockend;
  time_index = timespacing;

  maxdisplacement = maxdisp;

  n_times = lastblock-firstblock+1;
  time = system->displacement_times()[time_index];

  included = new Boolean_List[n_times];
  for(int timeii=0;timeii<n_times;timeii++)
  {
    included[timeii].set(syst);
  }


  time_conversion=new int [system->show_n_timesteps()];
  defined_times = new bool [system->show_n_timesteps()];
  for(timeii=0;timeii<system->show_n_timesteps();timeii++)
  {
    time_conversion[timeii]=int(float(timeii-sys->show_frt())/float(system->show_n_exponential_steps()));
    defined_times[timeii]=0;
  }
  for(timeii=0;timeii<system->show_n_timesteps();timeii+=system->show_n_exponential_steps())
  {
    defined_times[timeii]=1;
  }

}

/*Methods to do calculation on list of trajectories*/

void Displacement_Map::analyze(Trajectory_List* t_list)
{


  trajectory_list = t_list;

  currentblock = 0;

  system->displacement_list(this, time_index,firstblock,lastblock,false);
  postprocess_list();
}


void Displacement_Map::list_displacementkernel(int timegapii, int thisii, int nextii)
{
  currenttime=thisii;
  nexttime=nextii;

  (trajectory_list[0]).listloop(this,thisii);

  currentblock++;
}


void Displacement_Map::listkernel(Trajectory * current_trajectory)
{
  float msd;		//variable to temporarily hold mean-square displacement of atom
  int trajid;

  trajid = current_trajectory->show_trajectory_ID();
  msd = pow(current_trajectory->distance(currenttime,nexttime),2.0);  //determine msd of this atom

  set(currentblock,trajid,msd);
}



/*----------------------------------------------------------------*/
/*Method to write distribution and statistics to file*/

void Displacement_Map::write(string filename)const
{
  string map_file;
  int blockii;
  string datafile;

  datafile = filename;
  datafile = datafile.append(".dat");

  ofstream output(datafile.c_str());
  output << "Writing displacement maps at time spacing " << system->show_time(time_index) << " to files with stem " << filename << ".\n";
  output << "Maps generated by AMDAT v." << VERSION << "\n";
  if(maxdisplacement > 0){output << "Value mapped are capped at " << maxdisplacement << ".";}

  for(blockii=0;blockii<n_times;blockii++)
  {
    if(maxdisplacement > 0){map_file = write_pdb(system->blockstart(blockii),filename, system->blockstart(blockii),maxdisplacement);}
    else {map_file = write_pdb(system->blockstart(blockii),filename, system->blockstart(blockii));}
    cout << "\nMap of particle displacements written to "<<map_file<<" .";
    output << "Map of particle displacements written to "<<map_file<<" .\n";
  }

}

